<?php

namespace app\models;

use Yii;
use yii\helpers\ArrayHelper;

/**
 * This is the model class for table "regions".
 *
 * @property int $id
 * @property string $uid
 * @property string $name
 * @property FirmCultures[] allCulturesRelation
 * @property FirmCultures[] culturesByLastYearRelation
 * @property RegionCultures[] cultures
 */
class Regions extends ActiveRecord
{

    public static $allInstances = null;

    public $addInstanceAfterSave = false;

    public static $allPoints=[];

    public static $getAllPoints;

    public static $allCultures;

    /**
     * {@inheritdoc}
     */
    public static function tableName()
    {
        return 'regions';
    }

    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return [
            [['uid', 'name'], 'required'],
            [['uid', 'name'], 'string', 'max' => 250],
        ];
    }

    /**
     * {@inheritdoc}
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'uid' => 'Uid',
            'name' => 'Name',
        ];
    }

    public static function viewFields(){
        return ['id','uid','name','points','cultures'];
    }

    public static function relations(){
        return ['points','cultures.culture'];
    }

    public function afterFind()
    {
        if ($this->points && static::$getAllPoints){
            foreach ($this->points as $item){
                static::$allPoints[$item->id] = $item;
            }
        }
        parent::afterFind(); // TODO: Change the autogenerated stub
    }

    public static function getAllPoints(){
        return array_values(static::$allPoints);
    }

    public static function findByName($name)
    {
        return static::find()->where(['name' => $name])->one();
    }

    public function getPoints()
    {
        return $this->hasMany(Points::className(), ['regionUID' => 'uid']);
    }


    /**
     * @return \yii\db\ActiveQuery
     */
    public function getCultures(){
        return $this->hasMany(RegionCultures::className(), ['regionUID' => 'uid']);
    }

}

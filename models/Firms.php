<?php

namespace app\models;

use app\models\helper\Main;
use Yii;
use yii\helpers\ArrayHelper;

/**
 * This is the model class for table "firms".
 *
 * @property int $id
 * @property string $name
 * @property string $director
 * @property string $rdpu
 * @property int $contactUID
 * @property string $contactPost
 */
class Firms extends \yii\db\ActiveRecord
{

    public $saveContacts;

    public $saveCultures;
    /**
     * {@inheritdoc}
     */
    public static function tableName()
    {
        return 'firms';
    }

    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return [
            [['uid'],'unique'],
            [['uid', 'name'], 'required'],
            [['square'], 'number'],
            [['uid', 'name', 'rdpu', 'regionUID', 'pointUID'], 'string', 'max' => 250],
            [['contacts','cultures'],'safe'],
        ];
    }

    /**
     * {@inheritdoc}
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'name' => 'Name',
            'director' => 'Director',
            'rdpu' => 'Rdpu',
            'contactUID' => 'Contact Uid',
        ];
    }

    public static function viewFields(){
        return ['id','uid','name','director','rdpu','square','regionUID','pointUID','contacts',
            'cultures',
            'region', 'point'];
    }

    public static function viewRelations(){
        return ['contactsRelation', 'region', 'point',
            'culturesRelation.culture'
        ];
    }

    public function afterSave($insert, $changedAttributes)
    {
        parent::afterSave($insert, $changedAttributes); // TODO: Change the autogenerated stub
        $this->saveContacts();
        $this->saveCultures();
    }

    public function setContacts($contacts){
           $this->saveContacts = $contacts;
    }

    public function setCultures($value){
         $this->saveCultures = $value;
    }

    public function saveContacts(){
        FirmContacts::deleteAll(['firmUID' => $this->uid]);
        if ($this->saveContacts && is_array($this->saveContacts)){
            foreach ($this->saveContacts as $contactInfo){
               $contactUID = $this->getContactUID($contactInfo);
               if ($contactUID){
                   $firmContactModel = new FirmContacts();
                   $firmContactModel->attributes = [
                       'firmUID' => $this->uid,
                       'contactUID' => $contactUID,
                   ];
                   $firmContactModel->save();
               }
            }
        }
    }

    public function saveCultures(){
        FirmCultures::deleteAll(['firmUID' => $this->uid]);
        if ($this->saveCultures && is_array($this->saveCultures)){
            foreach ($this->saveCultures as $info){
                $object = new FirmCultures();
                $object->attributes = $info;
                $object->firmUID = $this->uid;
                $object->save();
                if ($object->hasErrors()){
                    $this->addErrors(['сultures' => $object->getErrors()]);
                }
            }
        }
    }

    public function getContactUID($contactInfo){
        if (ArrayHelper::getValue($contactInfo,'uid')){
            return (string)ArrayHelper::getValue($contactInfo,'uid');
        }

        $contactModel = $this->saveContact($contactInfo);
        return $contactModel->getErrors() ? null : $contactModel->uid;
    }

    public function saveContact($contactInfo){
        $contactModel = new Contacts();
        $contactModel->attributes = $contactInfo;
        $contactModel->save();
        if ($contactModel->getErrors()){
            $this->addErrors(['contacts'=>$contactModel->getErrors()]);
        }
        return $contactModel;
    }

    public function getDirector(){
        if ($this->contacts){
            foreach ($this->contacts as $contactInfo){
                if (isset($contactInfo['post']['director']) && $contactInfo['post']['director']){
                    return $contactInfo;
                }
            }
        }
    }

    public function getRegion(){
        return $this->hasOne(Regions::className(),['uid'=>'regionUID']);
    }

    public function getPoint(){
        return $this->hasOne(Points::className(),['uid'=>'pointUID']);
    }

    public function getContactsRelation(){
        return $this->hasMany(Contacts::className(),['uid'=>'contactUID'])->viaTable('firmContacts',['firmUID'=>'uid']);
    }

    public function getCulturesRelation(){
        return $this->hasMany(FirmCultures::className(),['firmUID'=>'uid'])->orderBy(['year' => SORT_DESC]);
    }

    public function getContacts(){
        return ArrayHelper::toArray($this->contactsRelation,[Contacts::className()=>Contacts::viewFields()]);
    }

    public function getCultures(){
        return ArrayHelper::toArray($this->culturesRelation,[FirmCultures::className()=>FirmCultures::viewFields()]);
    }


}

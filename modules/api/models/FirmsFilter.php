<?php
/**
 * Created by PhpStorm.
 * User: programmer_5
 * Date: 21.11.2018
 * Time: 12:26
 */

namespace app\modules\api\models;

use app\models\filter\FilterDataTrait;
use app\models\FirmCultures;

class FirmsFilter extends Firms
{

    use FilterDataTrait;

    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub
    }


    /**
     * @return array
     */
    public function rules()
    {
        return [
            [['square', 'processedSquare'], 'number'],
            [['name', 'rdpu', 'region.name','point.name','stringForSearchAll','cultures.culture.name','mainContact.name','mainContact.phone'], 'string', 'max' => 250],
            [['square|sort','processedSquare|sort','name|sort'],'sortValidate'],
            [['regionUID', 'pointUID', 'sender','cultures.cultureUID'],'arrayValidate']
        ];
    }


    public function arrayValidate($attribute){
        if (!is_array($this->$attribute)) {
            return false;
        }
        if (is_array($this->$attribute) && $this->$attribute){
            foreach ($this->$attribute as $v){
                if (!is_string($v) || is_integer($v)){
                    return false;
                }
            }
        }
        return true;
    }

    public function rulesFilter(){
        return [
            [['square','processedSquare'],'range',['>','=']],
            [['name','rdpu','cultures.culture.name', 'mainContact.name','mainContact.phone'],'andWhere',['like']],
            [['pointUID','regionUID','sender','cultures.cultureUID'],'andWhere',['in']],
            [['square|sort','processedSquare|sort','name|sort'],'sort'],
            [['stringForSearchAll'],'search',[['name', 'rdpu','region.name','point.name','cultures.culture.name', 'mainContact.name','mainContact.phone']]]
        ];
    }

    public function attributesAdd()
    {
        return ['cultures.cultureUID','cultures.culture.name','region.name','point.name','stringForSearchAll','square|sort','processedSquare|sort','name|sort','processedSquare','mainContact.name','mainContact.phone'];
    }

    public function attributesNameInQuery($attribute)
    {
        return [
            'square|sort' => 'square',
            'processedSquare' => $this->processedSquareField(),
            'processedSquare|sort' => $this->processedSquareField(),
            'cultures.culture.name' => 'culture.name',
            'name|sort' => 'name',
            'mainContact.phone' => 'REPLACE(REPLACE(REPLACE(REPLACE(mainContact.phone, " ", ""),"(",""),")",""),"+","")'
        ];
    }


    public function culturesCultureJoin(){
        $this->setJoinUniq(['LEFT','firmCultures AS cultures','cultures.firmUID = firms.uid']);
        $this->setJoinUniq(['LEFT','culture AS culture','culture.uid = cultures.cultureUID']);
    }

    public function contactJoin(){
        return ['LEFT','contacts AS mainContact','mainContact.firmUID = firms.uid AND mainContact.main = 1'];
    }

    public function culturesCultureNameSetJoin(){
       return $this->culturesCultureJoin();
    }

    public function culturesCultureUIDSetJoin(){
        return $this->culturesCultureJoin();
    }

    public function mainContactNameSetJoin(){
        return $this->contactJoin();
    }

    public function mainContactPhoneSetJoin(){
        return $this->contactJoin();
    }

    public function processedSquareField(){
        return '('.
            FirmCultures::find()->select('SUM(firmCultures.square)')
                ->where('firmUID = firms.uid AND firmCultures.year = '.date('Y'))
                ->createCommand()->getRawSql()
            .')';
    }

    public function getProcessedSquare(){
        return $this->processedSquare;
    }

    public function getMainContactPhone(){

        return $this->getAttribute('mainContact.phone') ? str_replace(['+','(',')',' '],'',$this->getAttribute('mainContact.phone')) : null;
    }

    public function afterSearch()
    {
//       dump($this->getQuery()->createCommand()->getRawSql(),1);
    }


}